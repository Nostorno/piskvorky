import os, random
from data10x10 import (
    moznosti_hrac_2,
    moznosti_hrac_3,
    moznosti_hrac_4,
    moznosti_pc_2,
    moznosti_pc_3,
    moznosti_pc_4,
)

os.system("cls")

hraci_seznam = []  # seznam hraci plochy
hraci_seznam_hodnoty = []  # seznam hodnot hraci plochy
game = True  # cyklus hry
prvni_kolo = False  # pro prvni kolo pocitace
nyni_hrac = 0  # maximalni dosazeny pocet hrace
nyni_pocitac = 1  # maximalni dosazeny pocet pc
tahy_hrace = []
budouci = 0


def vytvoreni_seznamu():  # funkce seznamu plochy a hodnot
    for cislo in range(10):
        rada = ["拘럺잺"] * 10
        hraci_seznam.append(rada)
    for cislo in range(10):
        rada = ["n"] * 10
        hraci_seznam_hodnoty.append(rada)


vytvoreni_seznamu()


def hraci_plocha():  # vypise hraci plochu
    for radek in range(10):
        for sloupec in range(10):
            if sloupec < 9:
                print(hraci_seznam[radek][sloupec], end="")
            elif sloupec == 9:
                print(hraci_seznam[radek][sloupec])


def hodnoty():  # vypise hodnoty hraci plochy
    for radek in range(0, 10):
        for sloupec in range(0, 10):
            if sloupec < 9:
                print(hraci_seznam_hodnoty[radek][sloupec], end="")
            elif sloupec == 9:
                print(hraci_seznam_hodnoty[radek][sloupec])


# zobrazeni herniho stavu
def informace(prvni_kolo, nyni_pocitac, nyni_hrac, budouci):
    print(f"Pc 1 kolo: {prvni_kolo}")
    print(f"Pc ma nyni: {nyni_pocitac} v rade.")
    print(f"Hrac ma nyni: {nyni_hrac} v rade.")
    print(f"Hrac v dalsim kole: {budouci} v rade.")
    return


def hrac():
    kontrola_souradnic = True
    while kontrola_souradnic:
        xy = input("zadej cislo sloupce 0-9 a radky 0-9:")
        if len(xy) != 2:
            print("hodnota neobsahuje dve osy! hraj znovu! " + str(xy))
            kontrola_souradnic = True
        else:
            x = int(xy[0])
            y = int(xy[1])
            tah = hraci_seznam_hodnoty[y][x]
            if tah == "z" or tah == "c":
                print("policko je jiz obsazene!")
                kontrola_souradnic = True
            elif tah == "n":
                hraci_seznam[y][x] = "游릴"
                hraci_seznam_hodnoty[y][x] = "z"
                kontrola_souradnic = False
                hraci_plocha()
    return


def vyhodnoceni(nyni_pocitac, nyni_hrac):
    kombinace = []  # seznam hernich moznosti
    for radky in range(10):  # kombinace radky
        jedna_kombinace = "".join(hraci_seznam_hodnoty[radky][0:10])
        jedna_kombinace = "x" + jedna_kombinace + "x"
        kombinace.append(jedna_kombinace)
    for sloupce in range(10):  # kombinace sloupce
        jedna_kombinace = "".join([seznam[sloupce] for seznam in hraci_seznam_hodnoty])
        jedna_kombinace = "x" + jedna_kombinace + "x"
        kombinace.append(jedna_kombinace)
    jedna_kombinace = ""

    for y in range(4, 10):  # kombinace diagonalni cast 1
        for x in range(y, -1, -1):
            jedna_kombinace += hraci_seznam_hodnoty[x][y - x]
        jedna_kombinace = "x" + jedna_kombinace + "x"
        kombinace.append(jedna_kombinace)
        jedna_kombinace = ""

    for y in range(5):  # kombinace diagonalni cast 2
        for x in range(9, 4 - y, -1):
            jedna_kombinace += hraci_seznam_hodnoty[x][9 - x + 5 - y]
        jedna_kombinace = "x" + jedna_kombinace + "x"
        kombinace.append(jedna_kombinace)
        jedna_kombinace = ""

    for y in range(6):  # kombinace diagonalni cast 3
        pomocna_p = 0
        for x in range(0 + y, 10):
            jedna_kombinace += hraci_seznam_hodnoty[x][pomocna_p]
            pomocna_p += 1
        jedna_kombinace = "x" + jedna_kombinace + "x"
        kombinace.append(jedna_kombinace)
        jedna_kombinace = ""

    pomocna_p = 6  #  kombinace diagonalni cast 4
    for y in range(5):
        pomocna_p -= 1
        for x in range(5 + y):
            jedna_kombinace += hraci_seznam_hodnoty[x][pomocna_p + x]
        jedna_kombinace = "x" + jedna_kombinace + "x"
        kombinace.append(jedna_kombinace)
        jedna_kombinace = ""

    testovaci_hrac = 0
    testovaci_pc = 0

    for seznam in kombinace:  # projde seznam kombinace
        if "c" in seznam:  # pro pc
            nyni_pocitac = 1
        for moznosti2 in moznosti_pc_2:
            if moznosti2 in seznam:
                nyni_pocitac = 2
        for moznosti3 in moznosti_pc_3:
            if moznosti3 in seznam:
                nyni_pocitac = 3
        for moznosti4 in moznosti_pc_4:
            if moznosti4 in seznam:
                nyni_pocitac = 4
        if "ccccc" in seznam:
            nyni_pocitac = 5

        if testovaci_pc < nyni_pocitac:
            testovaci_pc = nyni_pocitac

        if "z" in seznam:  # pro hrace
            nyni_hrac = 1
        for moznosti2 in moznosti_hrac_2:
            if moznosti2 in seznam:
                nyni_hrac = 2
        for moznosti3 in moznosti_hrac_3:
            if moznosti3 in seznam:
                nyni_hrac = 3
        for moznosti4 in moznosti_hrac_4:
            if moznosti4 in seznam:
                nyni_hrac = 4
        if "zzzzz" in seznam:
            nyni_hrac = 5
        if testovaci_hrac < nyni_hrac:
            testovaci_hrac = nyni_hrac
    nyni_hrac = testovaci_hrac
    nyni_pocitac = testovaci_pc

    return nyni_pocitac, nyni_hrac


def pocitac(prvni_kolo, nyni_pocitac, nyni_hrac, budouci):
    pocitac_odehral = False  # zda PC odehral
    nenalezeno = 0  # pocet opakovani v pripade nevhodneho tahu
    if budouci > 3:  # hrac +3, pole vybrano ze seznamu
        pc_x = int(tahy_hrace[0][0])
        pc_y = int(tahy_hrace[0][1])
        hraci_seznam[pc_y][pc_x] = "游린"
        hraci_seznam_hodnoty[pc_y][pc_x] = "c"
        # os.system("cls")
        hraci_plocha()
        pocitac_odehral = True

    while not pocitac_odehral:  # hlavni smycka
        if prvni_kolo == False:  # podminka pro prvni tah PC
            pc_x = random.randint(4, 5)
            pc_y = random.randint(4, 5)
            prvni_kolo = True
            hraci_seznam[pc_y][pc_x] = "游린"
            hraci_seznam_hodnoty[pc_y][pc_x] = "c"
            # os.system("cls")
            hraci_plocha()
            pocitac_odehral = True

        else:  # dalsi kola
            pc_x = random.randint(0, 9)
            pc_y = random.randint(0, 9)
            souradnice = str(pc_x) + str(pc_y)
            pc_tah = hraci_seznam_hodnoty[pc_y][pc_x]
            if pc_tah == "n":  # kontrola zda je pole volne
                hraci_seznam[pc_y][pc_x] = "游린"
                hraci_seznam_hodnoty[pc_y][pc_x] = "c"
                pc_uktualne = nyni_pocitac  # ulozeni aktualniho stavu PC
                nyni_pocitac, nyni_hrac = vyhodnoceni(nyni_pocitac, nyni_hrac)

                if nyni_pocitac > pc_uktualne:  # tah je vhodny
                    nenalezeno += 1
                    if nenalezeno < 250 and souradnice in tahy_hrace:  # vhodny+blokace
                        # os.system("cls")
                        hraci_plocha()
                        pocitac_odehral = True
                        nenalezeno = 0
                        # print(tahy_hrace)
                    elif nenalezeno > 250:  # uz jen vhodny
                        # os.system("cls")
                        hraci_plocha()
                        pocitac_odehral = True
                        nenalezeno = 0
                        # print(tahy_hrace)
                    else:  #
                        nyni_pocitac = pc_uktualne
                        hraci_seznam[pc_y][pc_x] = "拘럺잺"
                        hraci_seznam_hodnoty[pc_y][pc_x] = "n"

                else:  # tah je nevhodny, bude generovat novou pozici
                    # 500 moznosti pak snizeni radu o 1
                    hraci_seznam[pc_y][pc_x] = "拘럺잺"
                    hraci_seznam_hodnoty[pc_y][pc_x] = "n"
                    nenalezeno += 1
                    print(nenalezeno)
                    if nenalezeno > 400:
                        nenalezeno = 0
                        nyni_pocitac -= 1
            else:  # kdyz je pole obsazene
                nenalezeno += 1

    return prvni_kolo, nyni_pocitac, nyni_hrac, budouci


def pocitac_hrac(nyni_hrac, nyni_pocitac, budouci, tahy_hrace):
    nyni_pocitac, nyni_hrac = vyhodnoceni(nyni_pocitac, nyni_hrac)
    budouci = 0  # hrac v dalsim kole
    tahy_hrace = []  # seznam moznych tahu
    hledani_tahu_pc = nyni_hrac  # do promenne zapisi aktualni pocet
    if nyni_hrac >= 1:  # hleda tah jen kdyz hrac ma 1 a vice(prvni kolo ne)
        for hledani in range(500):
            pc_x = random.randint(0, 9)
            pc_y = random.randint(0, 9)
            pc_tah = hraci_seznam_hodnoty[pc_y][pc_x]
            if pc_tah == "n":  # pole je volne, zapise z
                hraci_seznam_hodnoty[pc_y][pc_x] = "z"
                nyni_pocitac, nyni_hrac = vyhodnoceni(nyni_pocitac, nyni_hrac)
                hraci_seznam_hodnoty[pc_y][pc_x] = "n"
                if nyni_hrac > hledani_tahu_pc:  # je vyssi nez predchazejici?
                    souradnice_hrace = str(pc_x) + str(pc_y)
                    tahy_hrace.append(souradnice_hrace)  # ulozi souradnice do seznamu
                if budouci < nyni_hrac:  # do budouci zapise nejvyssi nalezeny pocet
                    budouci = nyni_hrac
        nyni_hrac = hledani_tahu_pc  # vrati promenou nyni_hrac do puvodniho stavu
    return nyni_hrac, nyni_pocitac, budouci, tahy_hrace


while game:
    nyni_hrac, nyni_pocitac, budouci, tahy_hrace = pocitac_hrac(
        nyni_hrac, nyni_pocitac, budouci, tahy_hrace
    )
    print(tahy_hrace)

    prvni_kolo, nyni_pocitac, nyni_hrac, budouci = pocitac(
        prvni_kolo, nyni_pocitac, nyni_hrac, budouci
    )

    nyni_hrac, nyni_pocitac, budouci, tahy_hrace = pocitac_hrac(
        nyni_hrac, nyni_pocitac, budouci, tahy_hrace
    )
    informace(prvni_kolo, nyni_pocitac, nyni_hrac, budouci)
    if nyni_pocitac == 5:
        print("Pc vyhral!")
        break
    hrac()

    print("dalsi kolo")
    nyni_pocitac, nyni_hrac = vyhodnoceni(nyni_pocitac, nyni_hrac)
    if nyni_hrac == 5:
        print("Vyhral jsi!")
        break
    informace(prvni_kolo, nyni_pocitac, nyni_hrac, budouci)
